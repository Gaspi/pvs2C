/*
C file generated from first.pvs
Make sure to link GMP and PVS.c in compilation:
    gcc -o first first.c PVS.c -lgmp
    ./first
*/

#include<stdio.h>
#include "PVS.h"
#include "first.h"

#define TRUE 1
#define FALSE 0

int main(void) {
  printf("Executing first ...\n");
  return 0;
}

BigInt pvs_a114() {
  return pvsAdd(pvsSub(pvsInt("2"), pvsInt("1")), pvsNeg(pvsInt("2")));
}

BigInt pvs_d_a115() {
  return pvsAdd(pvsSub(pvsInt("2"), pvsInt("1")), pvsNeg(pvsInt("2")));
}

BigInt pvs_adda116(BigInt i) {
  return pvsAdd(pvs_a114(), i);
}

BigInt pvs_d_adda117(BigInt i) {
  return pvsAdd(pvs_a114(), i);
}

BigInt pvs_foo118(BigInt x) {
  number if123;
  if(intEq(x, pvsInt("0"))) {
    Rational if124;
    if(pvsGe(pvsAdd(x, pvsInt("1")), pvsInt("3"))) {
      if124 = pvsInt("0");
    } else {
      if124 = pvsInt("8");
    }
    if123 = pvsTimes(pvsInt("7"), if124);
  } else {
    Rational if125;
    if(pvsLe(pvsInt("1"), pvsInt("1"))) {
      if125 = pvsInt("6");
    } else {
      if125 = pvsInt("3");
    }
    if123 = pvsSub(pvsInt("8"), if125);
  }
  return pvsAdd(pvsInt("1"), if123);
}

BigInt pvs_d_foo119(BigInt x) {
  number if123;
  if(intEq(x, pvsInt("0"))) {
    Rational if124;
    if(pvsGe(pvsAdd(x, pvsInt("1")), pvsInt("3"))) {
      if124 = pvsInt("0");
    } else {
      if124 = pvsInt("8");
    }
    if123 = pvsTimes(pvsInt("7"), if124);
  } else {
    Rational if125;
    if(pvsLe(pvsInt("1"), pvsInt("1"))) {
      if125 = pvsInt("6");
    } else {
      if125 = pvsInt("3");
    }
    if123 = pvsSub(pvsInt("8"), if125);
  }
  return pvsAdd(pvsInt("1"), if123);
}

BigInt pvs_add2126(BigInt a) {
  Rational if129;
  if(intEq(a, pvsInt("1"))) {
    if129 = pvsInt("1");
  } else {
    if129 = pvsInt("0");
  }
  BigInt d = pvsInt("2");
  BigInt c = pvsAdd(a, if129);
  return pvsAdd(pvsAdd(c, d), pvsInt("1"));
}

BigInt pvs_d_add2127(BigInt a) {
  Rational if129;
  if(intEq(a, pvsInt("1"))) {
    if129 = pvsInt("1");
  } else {
    if129 = pvsInt("0");
  }
  BigInt d = pvsInt("2");
  BigInt c = pvsAdd(a, if129);
  return pvsAdd(pvsAdd(c, d), pvsInt("1"));
}

BigInt pvs_factorial130(BigInt n) {
  number if133;
  if(intEq(n, pvsInt("0"))) {
    if133 = pvsInt("1");
  } else {
    if133 = pvsTimes(n, pvs_d_factorial131(pvsSub(n, pvsInt("1"))));
  }
  return if133;
}

BigInt pvs_d_factorial131(BigInt n) {
  number if133;
  if(intEq(n, pvsInt("0"))) {
    if133 = pvsInt("1");
  } else {
    if133 = pvsTimes(n, pvs_d_factorial131(pvsSub(n, pvsInt("1"))));
  }
  return if133;
}

BigInt pvs_binomial134(BigInt a, BigInt b) {
  number if138;
  if(intEq(b, pvsInt("0"))) {
    if138 = pvsInt("1");
  } else {
    number if139;
    if(intEq(a, pvsInt("0"))) {
      if139 = pvsInt("0");
    } else {
      if139 = pvsAdd(pvs_d_binomial135(pvsSub(a, pvsInt("1")), pvsSub(b, pvsInt("1"))), pvs_d_binomial135(pvsSub(a, pvsInt("1")), b));
    }
    if138 = if139;
  }
  return if138;
}

BigInt pvs_d_binomial135(BigInt a, BigInt b) {
  number if138;
  if(intEq(b, pvsInt("0"))) {
    if138 = pvsInt("1");
  } else {
    number if139;
    if(intEq(a, pvsInt("0"))) {
      if139 = pvsInt("0");
    } else {
      if139 = pvsAdd(pvs_d_binomial135(pvsSub(a, pvsInt("1")), pvsSub(b, pvsInt("1"))), pvs_d_binomial135(pvsSub(a, pvsInt("1")), b));
    }
    if138 = if139;
  }
  return if138;
}